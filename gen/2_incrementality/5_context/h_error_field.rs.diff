--- original
+++ modified
@@ -8,19 +8,25 @@
 use crate::store::{Store, TaskNode};

 pub struct TopDownContext<T, O> {
   store: Store<T, O>,
   current_executing_task: Option<TaskNode>,
+  dependency_check_errors: Vec<io::Error>,
 }

 impl<T: Task> TopDownContext<T, T::Output> {
   pub fn new() -> Self {
     Self {
       store: Store::default(),
       current_executing_task: None,
+      dependency_check_errors: Vec::default(),
     }
   }
+
+  pub fn get_dependency_check_errors(&self) -> impl Iterator<Item=&io::Error> {
+    self.dependency_check_errors.iter()
+  }
 }

 impl<T: Task> Context<T> for TopDownContext<T, T::Output> {
   fn require_file_with_stamper<P: AsRef<Path>>(&mut self, path: P, stamper: FileStamper) -> Result<Option<File>, io::Error> {
     let Some(current_executing_task_node) = &self.current_executing_task else {
