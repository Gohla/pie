--- pie/src/context/top_down.rs
+++ pie/src/context/top_down.rs
@@ -62,3 +62,23 @@
     output
   }
 }
+
+impl<T: Task> TopDownContext<T, T::Output> {
+  /// Checks whether given task should be executed, returning `true` if it should be executed. A task should be executed
+  /// if any of its dependencies are inconsistent, or when it has no output.
+  fn should_execute_task(&mut self, node: &TaskNode) -> bool {
+    // Borrow: because we pass `self` (which is `&mut self`) to `is_inconsistent` for recursive consistency checking,
+    //         we need to clone and collect dependencies into a `Vec`. Otherwise we have an immutable borrow of `self`
+    //         through `self.store` while we create a mutable borrow of `self`, which is not allowed.
+    let dependencies: Vec<_> = self.store.get_dependencies_of_task(node).cloned().collect();
+    for dependency in dependencies {
+      match dependency.is_inconsistent(self) {
+        Ok(Some(_)) => return true,
+        _ => {} // Consistent: continue checking
+      }
+    }
+    // Task has no dependencies or all dependencies are consistent. Should only execute if it has no output, meaning
+    // that it has never been executed before.
+    return !self.store.task_has_output(node);
+  }
+}
