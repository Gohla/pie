--- pie/tests/top_down.rs
+++ pie/tests/top_down.rs
@@ -140,6 +140,47 @@
   let output = pie.require_then_assert_no_execute(&lower)?;
   assert_eq!(output.as_str(), "hello world!");
 
+  // Change `file` such that the file dependency of `ReadFile` becomes inconsistent.
+  write_until_modified(&file, "!DLROW OLLEH")?;
+
+  // 3) Require `ToLower` and assert that both tasks are re-executed in reverse dependency order:
+  // → ToLower
+  //   ? ReadFile
+  //     → ReadFile
+  //       ✗ `file` [inconsistent: modified file stamp change]
+  //       ▶ ReadFile [reason: `file` is inconsistent due to modified file stamp change]
+  //         - `file`
+  //       ◀ Ok(String("!DLROW OLLEH")) [note: returns a different output!]
+  //     ← Ok(String("!DLROW OLLEH"))
+  //   ✗ ReadFile [inconsistent: equals output stamp change]
+  //   ▶ ToLower [reason: ReadFile is inconsistent due to equals output stamp change]
+  //     → ReadFile
+  //     ← Ok(String("!DLROW OLLEH")) [note: skipped checking `read` because it is already consistent this session!]
+  //   ◀ Ok(String("!dlrow olleh"))
+  // ← Ok(String("!dlrow olleh"))
+  // 🏁
+  let output = pie.require_then_assert(&lower, |tracker| {
+    // Sanity checks: `ToLower` and `ReadFile` are required and executed, and `file` is required.
+    let lower_require = assert_matches!(tracker.first_require_task_range(&lower), Some(r) => r);
+    let lower_execute = assert_matches!(tracker.first_execute_range(&lower), Some(r) => r);
+    assert_task_temporally_sound(&lower_require, &lower_execute);
+    let read_require = assert_matches!(tracker.first_require_task_range(&read), Some(r) => r);
+    let read_execute = assert_matches!(tracker.first_execute_range(&read), Some(r) => r);
+    assert_task_temporally_sound(&read_require, &read_execute);
+    let file_require = assert_matches!(tracker.first_require_file_index(&file), Some(i) => i);
+
+    // Sanity check: `ReadFile` requires `file` while executing.
+    assert!(file_require > read_execute.start());
+    assert!(read_execute.end() > file_require);
+
+    // `ToLower` is executed after `ReadFile` has been executed.
+    assert!(lower_execute.start() > read_execute.end());
+    // `ReadFile` is executed while `ToLower` is being required.
+    assert!(read_execute.start() > lower_require.start());
+    assert!(lower_require.end() > read_execute.end());
+  })?;
+  assert_eq!(output.as_str(), "!dlrow olleh");
+
   Ok(())
 }
 
