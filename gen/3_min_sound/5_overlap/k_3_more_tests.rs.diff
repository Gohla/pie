--- pie/tests/top_down.rs
+++ pie/tests/top_down.rs
@@ -273,6 +273,50 @@
 }
 
 #[test]
+#[should_panic(expected = "Overlapping provided file")]
+fn test_require_overlapping_provided_file_panics() {
+  fn run() -> Result<(), io::Error> {
+    let mut pie = test_pie();
+    let temp_dir = create_temp_dir()?;
+
+    let output_file = temp_dir.path().join("out.txt");
+
+    let write_1 = WriteFile(Box::new(Return("Hi there")), output_file.clone(), FileStamper::Modified);
+    pie.require(&write_1)?;
+
+    // `write_2` is a different task, so requiring it will cause overlap.
+    let write_2 = WriteFile(Box::new(Return("Hello, World!")), output_file.clone(), FileStamper::Modified);
+    pie.require(&write_2)?;
+
+    Ok(())
+  }
+  run().unwrap()
+}
+
+#[test]
+fn test_same_task_no_overlap() -> Result<(), io::Error> {
+  let mut pie = test_pie();
+  let temp_dir = create_temp_dir()?;
+
+  let output_file = temp_dir.path().join("out.txt");
+  let input_file = temp_dir.path().join("in.txt");
+  write(&input_file, "Hello, World!")?;
+
+  let read = ReadFile(input_file.clone(), FileStamper::Modified);
+  let write = WriteFile(Box::new(read), output_file.clone(), FileStamper::Modified);
+
+  pie.require_then_assert_one_execute(&write)?;
+  // Requiring and executing the same task does not cause overlap.
+  write_until_modified(&input_file, "World, Hello?")?;
+  pie.require_then_assert_one_execute(&write)?;
+  // Even when required indirectly.
+  write_until_modified(&input_file, "Hello, World!")?;
+  pie.require_then_assert_one_execute(&Sequence(vec![write]))?;
+
+  Ok(())
+}
+
+#[test]
 fn test_separate_output_files() -> Result<(), io::Error> {
   let mut pie = test_pie();
   let temp_dir = create_temp_dir()?;
