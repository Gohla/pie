--- pie/tests/common/mod.rs
+++ pie/tests/common/mod.rs
@@ -1,6 +1,7 @@
 use std::io::{BufWriter, ErrorKind, Read, Stdout};
 use std::path::PathBuf;
 
+use dev_shared::write_until_modified;
 use pie::{Context, Pie, Task};
 use pie::stamp::FileStamper;
 use pie::tracker::CompositeTracker;
@@ -63,8 +64,10 @@
 pub enum TestTask {
   Return(&'static str),
   ReadFile(PathBuf, FileStamper),
+  WriteFile(Box<TestTask>, PathBuf, FileStamper),
   ToLower(Box<TestTask>),
   ToUpper(Box<TestTask>),
+  Sequence(Vec<TestTask>),
 }
 impl Task for TestTask {
   type Output = Result<TestOutput, ErrorKind>;
@@ -78,6 +81,12 @@
         }
         Ok(string.into())
       }
+      TestTask::WriteFile(string_provider_task, path, stamper) => {
+        let string = context.require_task(string_provider_task.as_ref())?.into_string();
+        write_until_modified(path, string.as_bytes()).map_err(|e| e.kind())?;
+        context.require_file_with_stamper(path, *stamper).map_err(|e| e.kind())?;
+        Ok(TestOutput::Unit)
+      }
       TestTask::ToLower(string_provider_task) => {
         let string = context.require_task(string_provider_task)?.into_string();
         Ok(string.to_lowercase().into())
@@ -86,6 +95,12 @@
         let string = context.require_task(string_provider_task)?.into_string();
         Ok(string.to_uppercase().into())
       }
+      TestTask::Sequence(tasks) => {
+        for task in tasks {
+          context.require_task(task)?;
+        }
+        Ok(TestOutput::Unit)
+      }
     }
   }
 }
@@ -94,19 +109,25 @@
 #[derive(Clone, Eq, PartialEq, Hash, Debug)]
 pub enum TestOutput {
   String(String),
+  Unit,
 }
 impl From<String> for TestOutput {
   fn from(value: String) -> Self { Self::String(value) }
 }
+impl From<()> for TestOutput {
+  fn from(_: ()) -> Self { Self::Unit }
+}
 impl TestOutput {
   pub fn as_str(&self) -> &str {
     match self {
       Self::String(s) => &s,
+      _ => panic!("{:?} does not contain a string", self),
     }
   }
   pub fn into_string(self) -> String {
     match self {
       Self::String(s) => s,
+      _ => panic!("{:?} does not contain a string", self),
     }
   }
 }
