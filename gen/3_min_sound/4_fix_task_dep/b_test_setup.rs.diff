--- pie/tests/top_down.rs
+++ pie/tests/top_down.rs
@@ -206,3 +206,35 @@
   // - Task require ends should be later than their executes.
   assert!(require.end() > execute.end());
 }
+
+#[test]
+fn test_no_superfluous_task_dependencies() -> Result<(), io::Error> {
+  let mut pie = test_pie();
+  let temp_dir = create_temp_dir()?;
+
+  let file = temp_dir.path().join("in.txt");
+  write(&file, "Hello, World!")?;
+  let read = ReadFile(file.clone(), FileStamper::Modified);
+  let lower = ToLower(Box::new(read.clone()));
+  let upper = ToUpper(Box::new(lower.clone()));
+
+  // Require `ToLower` and assert that `ReadFile` and `ToLower` are executed because they are new, but not `ToUpper`,
+  // because it not required by anything. `ToLower` will return `"hello, world!"`.
+  let output = pie.require_then_assert(&lower, |tracker| {
+    assert!(tracker.one_execute_of(&read));
+    assert!(tracker.one_execute_of(&lower));
+    assert!(!tracker.any_execute_of(&upper));
+  })?;
+  assert_eq!(output.as_str(), "hello, world!");
+
+  // Require `ToUpper` and assert that it is executed because it is new, but not `ReadFile` nor `ToLower` because their
+  // dependencies are consistent.
+  let output = pie.require_then_assert(&upper, |tracker| {
+    assert!(!tracker.any_execute_of(&read));
+    assert!(!tracker.any_execute_of(&lower));
+    assert!(tracker.one_execute_of(&upper));
+  })?;
+  assert_eq!(output.as_str(), "HELLO, WORLD!");
+
+  Ok(())
+}
