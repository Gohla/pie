--- pie/examples/incremental.rs
+++ pie/examples/incremental.rs
@@ -4,6 +4,7 @@
 use dev_shared::{create_temp_dir, write_until_modified};
 use pie::{Context, Pie, Task};
 use pie::stamp::FileStamper;
+use pie::tracker::writing::WritingTracker;
 
 /// Task that reads a string from a file.
 #[derive(Clone, Ord, PartialOrd, Eq, PartialEq, Hash, Debug)]
@@ -18,7 +19,6 @@
 impl Task for ReadStringFromFile {
   type Output = Result<String, io::ErrorKind>;
   fn execute<C: Context<Self>>(&self, context: &mut C) -> Self::Output {
-    println!("Reading from {} with {:?} stamper", self.0.file_name().unwrap().to_string_lossy(), self.1);
     let file = context.require_file_with_stamper(&self.0, self.1).map_err(|e| e.kind())?;
     if let Some(mut file) = file {
       let mut string = String::new();
@@ -35,7 +35,7 @@
   let input_file = temp_dir.path().join("input.txt");
   write_until_modified(&input_file, "Hi")?;
 
-  let mut pie = Pie::default();
+  let mut pie = Pie::with_tracker(WritingTracker::with_stdout());
   let read_task = ReadStringFromFile::new(&input_file, FileStamper::Modified);
 
   println!("A) New task: expect `read_task` to execute");
