--- pie/src/store.rs
+++ pie/src/store.rs
@@ -167,6 +167,31 @@
       }
     ).next()
   }
+  /// Get all task nodes for tasks that require file `dst`.
+  ///
+  /// # Panics
+  ///
+  /// Panics in development builds if `dst` was not found in the dependency graph.
+  pub fn get_tasks_requiring_file<'a>(&'a self, dst: &'a FileNode) -> impl Iterator<Item=TaskNode> + '_ {
+    debug_assert!(self.graph.contains_node(dst), "BUG: node {:?} was not found in the dependency graph", dst);
+    self.graph.get_incoming_edges(dst).filter_map(|(n, d)|
+      if matches!(d, Dependency::RequireFile(_)) {
+        Some(TaskNode(*n))
+      } else {
+        None
+      }
+    )
+  }
+  /// Checks whether there is a direct or indirect (transitive) dependency from task `src` to task `dst`.
+  ///
+  /// # Panics
+  ///
+  /// Panics in development builds if `src` or `dst` were not found in the dependency graph.
+  pub fn contains_transitive_task_dependency(&self, src: &TaskNode, dst: &TaskNode) -> bool {
+    debug_assert!(self.graph.contains_node(src), "BUG: src node {:?} was not found in the dependency graph", src);
+    debug_assert!(self.graph.contains_node(dst), "BUG: dst node {:?} was not found in the dependency graph", dst);
+    self.graph.contains_transitive_edge(src, dst)
+  }
 
   /// Add a file require `dependency` from task `src` to file `dst`.
   ///
